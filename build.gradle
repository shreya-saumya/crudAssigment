plugins {
    id 'org.springframework.boot' version '2.5.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "maven-publish"
    id "org.sonarqube" version "3.0"
    id 'java-library'
    id 'jacoco'
}

group = 'com.madmobile'
sourceCompatibility = '11'

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
    }

    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }
}

def serviceProjectName =       'crudDemoProject'

def serviceProjectSpecVendor = 'crudDemoProject'
def serviceProjectSpecTitle =  'Crud Demo Project'
def serviceProjectSpecVersion = "${version}"

def serviceProjectImplVendor = 'RedZone Retail'
def serviceProjectImplTitle =  'crudDemoProject'
def serviceProjectImplVersion = "${version}"

def propsFile = new File("${project.rootDir}/src/main/resources/service.properties")
def prop = new Properties()
prop.setProperty('service.name', serviceProjectName)
prop.setProperty('service.specification.version', serviceProjectSpecVersion)
prop.setProperty('service.specification.title', serviceProjectSpecTitle)
prop.setProperty('service.specification.vendor', serviceProjectSpecVendor)
prop.setProperty('service.implementation.version', serviceProjectImplVersion)
prop.setProperty('service.implementation.title', serviceProjectImplTitle)
prop.setProperty('service.implementation.vendor', serviceProjectImplVendor)
prop.setProperty('service.buildDate', new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()))
prop.store(propsFile.newWriter(), null)

jar {
    enabled = true
    manifest {
        attributes(
                'Name': serviceProjectName,
                'Specification-Version': serviceProjectSpecVersion,
                'Specification-Title': serviceProjectSpecTitle,
                'Specification-Vendor': serviceProjectSpecVendor,
                'Implementation-Version': serviceProjectImplVersion,
                'Implementation-Title': serviceProjectImplTitle,
                'Implementation-Vendor': serviceProjectImplVendor,
                'BuildDate': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                'Main-Class': 'com.madmobile.loyalty.LoyaltyProgramServiceApplication'
        )
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name "Artifactory"
        url "http://mm-maven.madmobile.com/artifactory/mm-internal"
        allowInsecureProtocol = true
        credentials {
            username = System.getenv("artifactory_user")
            password = System.getenv("artifactory_password")
        }
    }
}

publishing {
    repositories {
        repositories {
            mavenLocal()
            maven {
                name "Artifactory"
                url "http://mm-maven.madmobile.com/artifactory/mm-internal"
                allowInsecureProtocol = true
                credentials {
                    username = System.getenv("artifactory_user")
                    password = System.getenv("artifactory_password")
                }
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            groupId = "${group}"
            artifactId = "${rootProject.name}"
            version = "${version}"
            from components.java
        }
    }
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation group:'nl.jqno.equalsverifier', name: 'equalsverifier', version: '3.7.2'
    implementation group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: '1.7.3'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.5.10'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-data-rest', version: '1.5.10'
    implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '6.4'
    implementation group: 'commons-validator', name: 'commons-validator', version: '1.7'
    implementation group: 'com.googlecode.libphonenumber', name: 'libphonenumber', version: '5.5'
    implementation "org.codehaus.janino:janino:3.0.7"
    implementation 'com.madmobile:marvel-integration:2021.1.0'
    implementation 'com.madmobile:marvel-utils:2021.1.0'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.18'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: "com/marvel/loyalty/repository/**")
        }))
    }
}

test.finalizedBy jacocoTestReport

tasks.named('sonarqube').configure {
    dependsOn test
}

sonarqube {
    properties {
        property 'sonar.coverage.exclusions', "**com/example/cruddemoproject/CrudDemoProjectApplication.java**, **/com/marvel/loyalty/constants/**, **/com/marvel/loyalty/repository/**"
    }
}

//bootRun {
//    if(project.property('localDev') == 'true') {
//        environment "LOGSTASH_ENABLED", "false"
//        environment ("LOGSTASH_HOST", "localhost")
//        environment ("LOGSTASH_PORT", "1111")
//        environment ("SERVER_PORT", "8080")
//        environment ("LOG_LEVEL", "INFO")
//        environment ("SWAGGER_ENABLED", "true")
//
//        jvmArgs = ["-Xdebug", "-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5054"]
//    }
//}

test {
    environment "LOGSTASH_ENABLED", "false"
    environment ("LOGSTASH_HOST", "localhost")
    environment ("LOGSTASH_PORT", "1111")
    environment ("SERVER_PORT", "8080")
    environment ("LOG_LEVEL", "INFO")
    environment ("SWAGGER_ENABLED", "true")
    useJUnitPlatform()
}


jar {
    enabled = false
}
//
//jacocoTestCoverageVerification {
//    violationRules {
//        rule {
//            limit {
//                minimum = 0.69
//            }
//        }
//    }
//}

// to run coverage verification during the build (and fail when appropriate)
check.dependsOn jacocoTestCoverageVerification